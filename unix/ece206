#!/bin/bash

# ==================================================================== #
#                            script: ece206                            #
# ==================================================================== #
#% SYNOPSIS
#+    ece206 [COMMAND]
#%
#% DESCRIPTION
#-    A helper script to assist in utlizing a docker environment
#+    to write and test verilog projects.
#%
#% COMMANDS
#-    init    Create cli and working directory for projects
#-    start   Start docker container with ~/ece206 mounted
#-    update  Update the VSCode configuration and Docker image
#-    code    Open a preconfigured VSCode session in Docker
#%
#% OPTIONS
#-    --help                    Print help information
#%
#% EXAMPLES
#-    ece206 start
#%
#=======================================================================
#% IMPLEMENTATION
#-    version         0.0.2
#-    last updated    2022/1/21
#-    author(s)       BENJAMIN HERBER,
#-    repository      https://github.com/benherber/ece206-dockerenv
#%
#=======================================================================
#% HISTORY
#-    2021/10/21 : Benjamin Herber : Created Script
#-    2022/1/21 : Benjamin Herber : Updated to support .devcontainer
#=======================================================================

# #################################################################### #
#                              VARIABLES                               #
# #################################################################### #

WORKDIR=~/ece206                # Working directory for projects
DEVDIR="$WORKDIR/.devcontainer" # Development configuration directory.

VERSION="0.0.2"          # Version number
LAST_UPDATED="Jan. 2022" # Last update to script

IMAGE="benherber/ece206:latest"                                          # Docker base image
REPO="https://raw.githubusercontent.com/benherber/ece206-dockerenv/main" # GitHub Repository for raw downloads
DEVDOCKERFILE="${REPO}/.devcontainer/Dockerfile"                         # Devcontainer Dockerfile
DEVCONFIG="${REPO}/.devcontainer/devcontainer.json"                      # Devcontainer configuration

# Error Code
SUCCESS=0
FAILURE=-1

# #################################################################### #
#                              FUNCTIONS                               #
# #################################################################### #

# Error out on usage issue
# OUTPUTS:
#   Write help message to stderr

function usage() {
    echo "Unrecognized command: try \`ece206 --help\` for more options" 1>&2
    exit ${FAILURE}
}

# -------------------------------------------------------------------- #

# Start the docker container with $WORKDIR volume mounted
# GLOBALS:
#   WORKDIR, IMAGE
# OUTPUTS:
#   Interactive shell session within container

function start() {
    docker run \
    --rm \
    -v "${WORKDIR}":/workspace \
    -e BROADWAY=5 \
    -p 8085:8085 \
    -it "${IMAGE}" /bin/bash
}

# -------------------------------------------------------------------- #

# Update the existing VSCode configurations an Docker image
# GLOBALS:
#   DEVDIR
#   DEVCONFIG
#   DEVDOCKERFILE
#   IMAGE
# RETURN:
#   0 if succeeded, non-zero on error.

function update() {
    # Download the development configuration
    [ ! -d "${DEVDIR}" ] && echo "Error: run \`ece206 init\`" 1>&2 && exit 2
    [ -f "${DEVDIR}/Dockerfile" ] && \
        rm -f "${DEVDIR}/Dockerfile"
    [ -f "$DEVDIR/devcontainer.json" ] && \
        rm -f "${DEVDIR}/devcontainer.json"

    curl \
        -o "${DEVDIR}/devcontainer.json" "${DEVCONFIG}" \
        -o "${DEVDIR}/Dockerfile" "${DEVDOCKERFILE}"

    # Pull Docker image
    docker pull "${IMAGE}"

    exit ${SUCCESS}
}

# -------------------------------------------------------------------- #

# Open a preconfigured VSCode session inside a Docker container.
# GLOBALS:
#   WORKDIR
# RETURN:
#   0 if succeeded, non-zero on error.

function code() {
    if ! command -v devcontainer &> /dev/null
    then
        echo "ERROR: Please run \`Remote-Containers: Install devcontainer CLI\`" \
             "from the command pallete (cmd/ctrl+shit+P) in VSCode"
        exit ${FAILURE}
    fi

    devcontainer open "${WORKDIR/#\~/${HOME}}"
    exit ${SUCCESS}
}

# -------------------------------------------------------------------- #

# Create working directory (~/ece206) and put script in bin directory
# GLOBALS:
#   WORKDIR
#   DEVDIR
#   DEVCONFIG
#   DEVDOCKERFILE
#   IMAGE
# RETURN:
#   0 if succeeded, non-zero on error.

function init() {
    if ! command -v docker &> /dev/null
    then
        echo "ERROR: Install Docker and make sure it's running"
        exit ${FAILURE}
    fi

    # Validate directory structure
    [ ! -d "${WORKDIR}" ] && mkdir "${WORKDIR}"
    [ ! -d "${DEVDIR}" ] && mkdir "${DEVDIR}"
    [ -f "${DEVDIR}/Dockerfile" ] && \
        rm -f "${DEVDIR}/Dockerfile"
    [ -f "$DEVDIR/devcontainer.json" ] && \
        rm -f "${DEVDIR}/devcontainer.json"

    # Download the development configuration
    curl \
        -o "${DEVDIR}/devcontainer.json" "${DEVCONFIG}" \
        -o "${DEVDIR}/Dockerfile" "${DEVDOCKERFILE}"

    # Initialize CLI
    touch /usr/local/bin/ece206
    cat $(pwd)/ece206 >| /usr/local/bin/ece206
    chmod +x /usr/local/bin/ece206

    # Pull Docker image
    docker pull "${IMAGE}"
    exit ${SUCCESS}
}

# -------------------------------------------------------------------- #

# Print help information to stdout
# GLOBALS:
#   VERSION
#   LAST_UPDATED
#   WORKDIR
# OUTPUTS:
#   Write help info to stdout
# RETURN:
#   0 if print succeeds, non-zero on error.

function helpme() {
    TAB="\t"
    MSG=(
            ""
            "SYNOPSIS"
            "${TAB}ece206 [COMMAND]"
            ""
            "DESCRIPTION"
            "${TAB}A helper script to assist in utlizing a docker environment to write and test verilog projects."
            ""
            "COMMANDS"
            "${TAB}init${TAB}Create cli and working directory for projects"
            "${TAB}start${TAB}Start docker container with ~/ece206 mounted"
            "${TAB}update${TAB}Update the VSCode configuration and Docker image"
            "${TAB}code${TAB}Open a preconfigured VSCode session in Docker"
            ""
            "OPTIONS"
            "${TAB}--help | -h${TAB}Show this screen"
            ""
            "version: ${VERSION}, last updated: ${LAST_UPDATED}"
            ""
        )

    ( IFS=$'\n'; echo -e "${MSG[*]}" )
    exit ${SUCCESS}
}

# #################################################################### #
#                             MAIN PROGRAM                             #
# #################################################################### #

# Enforce number of args:
[[ $# -ne 1 ]] && usage

# Parse Args:
case "$1" in
    "init")
        init
    ;;
    "start")
        start
    ;;
    "-h" | "--help")
        helpme
    ;;
    "update")
        update
    ;;
    "code")
        code
    ;;
    *)
        usage
    ;;
esac

exit ${SUCCESS}
